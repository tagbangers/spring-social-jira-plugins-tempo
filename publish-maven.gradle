apply plugin: 'maven'
apply plugin: 'signing'

def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->
        // respect 'optional' and 'provided' dependencies
//        gradleProject.optionalDeps.each { dep ->
//            generatedPom.dependencies.findAll { it.artifactId == dep.name }*.optional = true
//        }
//        gradleProject.providedDeps.each { dep ->
//            generatedPom.dependencies.findAll { it.artifactId == dep.name }*.scope = 'provided'
//        }

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/tagbangers/spring-social-jira-plugins-tempo'
            organization {
                name = "Tagbangers, Inc."
                url = "https://www.tagbangers.co.jp/"
            }
            licenses {
                license {
                    name "The Apache Software License, Version 2.0"
                    url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }
            scm {
                url = 'https://github.com/tagbangers/spring-social-jira-plugins-tempo'
                connection = 'scm:git:git://github.com/tagbangers/spring-social-jira-plugins-tempo'
                developerConnection = 'scm:git:git://github.com/tagbangers/spring-social-jira-plugins-tempo'
            }
            developers {
                developer {
                    name = "OGAWA, Takeshi"
                    email = "ogawa@tagbangers.co.jp"
                    timezone = "-9"
                }
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        customizePom(pom, project)
    }
}

// Deploy to Maven Central Repository
if (gradle.startParameter.taskNames.contains('uploadArchives')) {
    // Signing Artifacts
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories.mavenDeployer {
            customizePom(pom, project)

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
        }
    }
}
